// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  name            String
  email           String     @unique
  password        String
  role            Int
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  sellerPurchases Purchase[] @relation("SellerPurchases")
  clientPurchases Purchase[] @relation("ClientPurchases")
  Product         Product[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Product     Product[]
}

model Product {
  id             Int        @id @default(autoincrement())
  name           String
  description    String
  price          Float
  path_image     String?
  stock          Int
  category_id    Int
  category       Category   @relation(fields: [category_id], references: [id])
  sales_quantity Int        @default(0)
  seller_id      Int
  seller         User       @relation(fields: [seller_id], references: [id])
  Purchase       Purchase[]
}

model Purchase {
  id          Int     @id @default(autoincrement())
  quantity    Int
  total_price Float
  observation String?

  seller_id Int
  seller    User @relation("SellerPurchases", fields: [seller_id], references: [id])

  client_id Int
  client    User @relation("ClientPurchases", fields: [client_id], references: [id])

  product_id Int
  product    Product  @relation(fields: [product_id], references: [id])
  created_at DateTime @default(now())
}
